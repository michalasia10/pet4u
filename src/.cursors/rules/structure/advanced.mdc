---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---
# Domain-Driven Design Frontend Architecture

This project follows a strict Domain-Driven Design (DDD) architecture adapted for frontend development. Below is the detailed structure and organization of the codebase.

## Core Domain Layer (`src/core/`)

Core domain contains shared business logic and domain models used across features:

### Entities
- Located in `src/core/domain/entities/`
- Example: [src/core/domain/entities/User.ts](mdc:src/core/domain/entities/User.ts)
- Contains business logic and invariants
- Uses private constructors and factory methods
- Implements proper encapsulation
- Uses Props interfaces for data transfer

## Feature Modules (`src/features/`)

Each feature follows internal DDD layering:

### 1. Domain Layer (`feature/domain/`)
- **Entities**: `domain/entities/` - Feature-specific business objects
  - Example: [src/features/auth/domain/entities/AuthCredentials.ts](mdc:src/features/auth/domain/entities/AuthCredentials.ts)
- **Value Objects**: `domain/valueObjects/` - Immutable value objects
  - Example: [src/features/auth/domain/valueObjects/AuthToken.ts](mdc:src/features/auth/domain/valueObjects/AuthToken.ts)
- **Aggregates**: `domain/aggregates/` - Consistency boundaries
  - Example: [src/features/auth/domain/aggregates/AuthAggregate.ts](mdc:src/features/auth/domain/aggregates/AuthAggregate.ts)
- **Repository Interfaces**: `domain/repositories/` - Persistence abstractions
  - Example: [src/features/auth/domain/repositories/IAuthRepository.ts](mdc:src/features/auth/domain/repositories/IAuthRepository.ts)

### 2. Application Layer (`feature/application/`)
- **Services**: `application/services/` - Orchestration of domain objects
  - Example: [src/features/auth/application/services/authService.ts](mdc:src/features/auth/application/services/authService.ts)
- **Hooks**: `application/hooks/` - React hooks for state management
  - Example: [src/features/auth/application/hooks/useAuth.ts](mdc:src/features/auth/application/hooks/useAuth.ts)

### 3. Infrastructure Layer (`feature/infrastructure/`)
- **Repositories**: `infrastructure/repositories/` - Implementation of domain repositories
  - Example: [src/features/auth/infrastructure/repositories/authRepository.ts](mdc:src/features/auth/infrastructure/repositories/authRepository.ts)

### 4. Presentation Layer (`feature/presentation/`)
- **Components**: `presentation/components/` - React components
  - Example: [src/features/auth/presentation/components/LoginForm.tsx](mdc:src/features/auth/presentation/components/LoginForm.tsx)
- **Pages**: `presentation/pages/` - Page components
  - Example: [src/features/auth/presentation/pages/LoginPage.tsx](mdc:src/features/auth/presentation/pages/LoginPage.tsx)
- **Validation**: `presentation/validation/` - Form validation schemas
  - Example: [src/features/auth/presentation/validation/loginFormSchema.ts](mdc:src/features/auth/presentation/validation/loginFormSchema.ts)

## Shared Resources (`src/shared/`)

Common utilities and components:

- **Validation**: `shared/validation/` - Shared validation logic
  - Messages: [src/shared/validation/messages.ts](mdc:src/shared/validation/messages.ts)
  - Schemas: [src/shared/validation/schemas.ts](mdc:src/shared/validation/schemas.ts)

## DDD Implementation Rules

1. **Entities**:
   - Must have private constructors
   - Use static factory methods for creation
   - Contain business logic and validation
   - Use Props interfaces for data transfer
   - Example: `User.create(props: IUserProps)`

2. **Value Objects**:
   - Immutable
   - Self-validating
   - No identity
   - Example: `AuthToken`

3. **Aggregates**:
   - Manage consistency between entities
   - Single entry point for changes
   - Example: `AuthAggregate`

4. **Repositories**:
   - Interface in domain layer
   - Implementation in infrastructure
   - Work with domain objects
   - Example: `IAuthRepository` and `AuthRepositoryImpl`

5. **Application Services**:
   - Orchestrate domain objects
   - Handle use cases
   - Don't contain business logic
   - Example: `AuthApplicationService`

6. **Presentation Layer**:
   - Uses application services
   - Contains no business logic
   - Handles UI state and events
   - Example: `LoginForm`

## File Naming Conventions

- Entities: PascalCase (e.g., `User.ts`)
- Value Objects: PascalCase (e.g., `AuthToken.ts`)
- Interfaces: Prefix with 'I' (e.g., `IAuthRepository.ts`)
- Props Interfaces: Suffix with 'Props' (e.g., `IUserProps`)
- Components: PascalCase (e.g., `LoginForm.tsx`)
- Hooks: camelCase with 'use' prefix (e.g., `useAuth.ts`)
- Services: PascalCase (e.g., `AuthService.ts`)
